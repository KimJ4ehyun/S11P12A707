{"ast":null,"code":"import { createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h2\", null, \"타임라인\", -1 /* HOISTED */);\nexport function render(_ctx, _cache) {\n  const _component_bar_chart = _resolveComponent(\"bar-chart\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, _createVNode(_component_bar_chart, {\n    data: _ctx.chartData,\n    options: _ctx.chartOptions\n  }, null, 8 /* PROPS */, [\"data\", \"options\"])]);\n}","map":{"version":3,"names":["_createElementVNode","_createElementBlock","_hoisted_1","_createVNode","_component_bar_chart","data","_ctx","chartData","options","chartOptions"],"sources":["C:\\Users\\SSAFY\\Desktop\\S11P12A707\\Frontend\\top\\src\\components\\TimeLine.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h2>타임라인</h2>\r\n    <bar-chart :data=\"chartData\" :options=\"chartOptions\"></bar-chart>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { Bar } from 'vue-chartjs';\r\nimport { Chart, registerables } from 'chart.js';\r\nChart.register(...registerables);\r\n\r\nexport default {\r\n  components: {\r\n    'bar-chart': Bar\r\n  },\r\n  data() {\r\n    return {\r\n      usageData: [10, 20, 30, 15, 25, 35, 10, 20, 30, 15, 25, 35, 10, 20, 30, 15, 25, 35, 10, 20, 56, 10, 20, 30],\r\n      chartData: {\r\n        labels: Array.from({ length: 24 }, (_, i) => i.toString()),\r\n        datasets: [{\r\n          label: 'Usage',\r\n          data: [10, 20, 30, 40, 50, 60],\r\n          backgroundColor: [],\r\n        }]\r\n      },\r\n      chartOptions: {\r\n        scales: {\r\n          y: {\r\n            beginAtZero: true,\r\n            max: 60\r\n          }\r\n        },\r\n        plugins: {\r\n          legend: {\r\n            display: false\r\n          }\r\n        }\r\n      }\r\n    };\r\n  },\r\n  console.log(this.chartData)\r\n  mounted() {\r\n    this.updateChartData();\r\n  },\r\n  methods: {\r\n    updateChartData() {\r\n      const maxUsage = Math.max(...this.usageData);\r\n      this.chartData.datasets[0].data = this.usageData;\r\n      // 변경할 색상들\r\n      const maxUsageColor = 'rgba(255, 0, 0, 1)'; // 빨간색\r\n      const defaultColor = 'rgba(211, 211, 211, 0.6)'; // 연회색\r\n      this.chartData.datasets[0].backgroundColor = this.usageData.map(value => value === maxUsage ? maxUsageColor : defaultColor);\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style>\r\nh2 {\r\n  color: #b0bec5;\r\n  font-weight: 700;\r\n  margin-bottom: 20px;\r\n}\r\n</style>"],"mappings":";gCAEIA,mBAAA,CAAa,YAAT,MAAI;;;uBADVC,mBAAA,CAGM,cAFJC,UAAa,EACbC,YAAA,CAAiEC,oBAAA;IAArDC,IAAI,EAAEC,IAAA,CAAAC,SAAS;IAAGC,OAAO,EAAEF,IAAA,CAAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}