{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-6504bcbb\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"timer\"\n};\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h2\", null, \"Timer\", -1 /* HOISTED */));\nconst _hoisted_3 = {\n  key: 0,\n  class: \"warning\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.category = $event),\n    placeholder: \"카테고리를 입력해주세요\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.category]]), $data.warningMessage ? (_openBlock(), _createElementBlock(\"p\", _hoisted_3, _toDisplayString($data.warningMessage), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"p\", null, _toDisplayString($options.formattedTime), 1 /* TEXT */), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.startTimer && $options.startTimer(...args))\n  }, \"집중 시작\"), _createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = (...args) => $options.stopTimer && $options.stopTimer(...args))\n  }, \"일시 정지\"), _createElementVNode(\"button\", {\n    onClick: _cache[3] || (_cache[3] = (...args) => $options.resetTimer && $options.resetTimer(...args))\n  }, \"시간 저장\")]);\n}","map":{"version":3,"names":["class","_createElementVNode","key","_createElementBlock","_hoisted_1","_hoisted_2","type","_cache","$event","$data","category","placeholder","warningMessage","_hoisted_3","_toDisplayString","_createCommentVNode","$options","formattedTime","onClick","args","startTimer","stopTimer","resetTimer"],"sources":["C:\\Users\\SSAFY\\Desktop\\S11P12A707\\Frontend\\top\\src\\components\\TimeCheck.vue"],"sourcesContent":["<template>\r\n  <div class=\"timer\">\r\n    <h2>Timer</h2>\r\n    <input type=\"text\" v-model=\"category\" placeholder=\"카테고리를 입력해주세요\">\r\n    <p v-if=\"warningMessage\" class=\"warning\">{{ warningMessage }}</p>\r\n    <p>{{ formattedTime }}</p>\r\n    <button @click=\"startTimer\">집중 시작</button>\r\n    <button @click=\"stopTimer\">일시 정지</button>\r\n    <button @click=\"resetTimer\">시간 저장</button>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      time: 0,\r\n      timer: null,\r\n      category: '',\r\n      warningMessage: ''\r\n    };\r\n  },\r\n  computed: {\r\n    formattedTime() {\r\n      const hours = String(Math.floor(this.time / 3600)).padStart(2, '0');\r\n      const minutes = String(Math.floor((this.time % 3600) / 60)).padStart(2, '0');\r\n      const seconds = String(this.time % 60).padStart(2, '0');\r\n      return `${hours}:${minutes}:${seconds}`;\r\n    }\r\n  },\r\n  methods: {\r\n    startTimer() {\r\n      if (!this.category) {\r\n        this.warningMessage = '카테고리를 입력해주세요';\r\n        return;\r\n      }\r\n      this.warningMessage = '';\r\n      if (this.timer === null) {\r\n        this.timer = setInterval(() => {\r\n          this.time++;\r\n        }, 1000);\r\n      }\r\n    },\r\n    stopTimer() {\r\n      clearInterval(this.timer);\r\n      this.timer = null;\r\n    },\r\n    resetTimer() {\r\n      if (!this.category) {\r\n        this.warningMessage = '카테고리를 입력해주세요';\r\n        return;\r\n      }\r\n      this.warningMessage = '';\r\n      this.category = '';\r\n      this.stopTimer();\r\n      this.time = 0;\r\n    }\r\n  },\r\n  beforeUnmount() {\r\n    this.stopTimer();\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.timer {\r\n  text-align: center;\r\n  margin-top: 20px;\r\n  font-family: Arial, sans-serif;\r\n  height: 300px;\r\n  width: 483px;\r\n}\r\n\r\n.timer h2 {\r\n  color: #b0bec5;\r\n  font-weight: 700;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.timer input {\r\n  margin-bottom: 20px;\r\n  padding: 10px;\r\n  font-size: 16px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 5px;\r\n  width: 200px;\r\n  text-align: center;\r\n}\r\n\r\n.timer input::placeholder {\r\n  color: transparent; /* 기본적으로 플레이스홀더를 투명하게 설정 */\r\n}\r\n\r\n.timer input:focus::placeholder {\r\n  color: transparent; /* 포커스가 있을 때 플레이스홀더를 투명하게 유지 */\r\n}\r\n\r\n.timer input:not(:focus)::placeholder {\r\n  color: #aaa; /* 포커스가 없을 때 플레이스홀더를 회색으로 설정 */\r\n}\r\n\r\n.timer p {\r\n  font-size: 48px;\r\n  font-weight: bold;\r\n  margin: 20px 0;\r\n}\r\n\r\n.timer button {\r\n  margin: 5px;\r\n  padding: 10px 20px;\r\n  font-size: 16px;\r\n  cursor: pointer;\r\n  border: none;\r\n  border-radius: 5px;\r\n  background-color: #f0f0f0;\r\n  transition: background-color 0.3s ease;\r\n}\r\n\r\n.timer button:hover {\r\n  background-color: #e0e0e0;\r\n}\r\n\r\n.timer .warning {\r\n  color: red;\r\n  font-size: 1rem;\r\n  font-weight: bold;\r\n  margin-top: 10px;\r\n}\r\n</style>\r\n"],"mappings":";;;EACOA,KAAK,EAAC;AAAO;gEAChBC,mBAAA,CAAc,YAAV,OAAK;;EAFbC,GAAA;EAI6BF,KAAK,EAAC;;;uBAHjCG,mBAAA,CAQM,OARNC,UAQM,GAPJC,UAAc,E,gBACdJ,mBAAA,CAAiE;IAA1DK,IAAI,EAAC,MAAM;IAHtB,uBAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAGgCC,KAAA,CAAAC,QAAQ,GAAAF,MAAA;IAAEG,WAAW,EAAC;iDAAtBF,KAAA,CAAAC,QAAQ,E,GAC3BD,KAAA,CAAAG,cAAc,I,cAAvBT,mBAAA,CAAiE,KAAjEU,UAAiE,EAAAC,gBAAA,CAArBL,KAAA,CAAAG,cAAc,oBAJ9DG,mBAAA,gBAKId,mBAAA,CAA0B,WAAAa,gBAAA,CAApBE,QAAA,CAAAC,aAAa,kBACnBhB,mBAAA,CAA0C;IAAjCiB,OAAK,EAAAX,MAAA,QAAAA,MAAA,UAAAY,IAAA,KAAEH,QAAA,CAAAI,UAAA,IAAAJ,QAAA,CAAAI,UAAA,IAAAD,IAAA,CAAU;KAAE,OAAK,GACjClB,mBAAA,CAAyC;IAAhCiB,OAAK,EAAAX,MAAA,QAAAA,MAAA,UAAAY,IAAA,KAAEH,QAAA,CAAAK,SAAA,IAAAL,QAAA,CAAAK,SAAA,IAAAF,IAAA,CAAS;KAAE,OAAK,GAChClB,mBAAA,CAA0C;IAAjCiB,OAAK,EAAAX,MAAA,QAAAA,MAAA,UAAAY,IAAA,KAAEH,QAAA,CAAAM,UAAA,IAAAN,QAAA,CAAAM,UAAA,IAAAH,IAAA,CAAU;KAAE,OAAK,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}