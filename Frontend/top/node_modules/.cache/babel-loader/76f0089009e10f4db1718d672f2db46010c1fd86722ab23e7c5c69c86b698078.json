{"ast":null,"code":"import axios from \"axios\";\nimport { ref, onMounted } from \"vue\";\nexport default {\n  name: \"GoalChart\",\n  props: {\n    animated: {\n      type: Boolean,\n      default: true\n    }\n  },\n  setup() {\n    const percentage = ref(0);\n    const timeStringToSeconds = timeString => {\n      const [hours, minutes, seconds] = timeString.split(\":\").map(Number);\n      return hours * 3600 + minutes * 60 + seconds;\n    };\n    const fetchFocusTime = async () => {\n      try {\n        const response = await axios.get(\"https://i11a707.p.ssafy.io:8082/dash/stats/focus-time\", {\n          params: {\n            period: \"day\"\n          }\n        });\n        console.log(response);\n        const dailyFocusTime = timeStringToSeconds(response.data.totalFocusTime);\n        return dailyFocusTime;\n      } catch (error) {\n        console.error(\"데이터를 가져오는 중 오류 발생:\", error);\n        return 0;\n      }\n    };\n    const fetchTimeGoal = async () => {\n      try {\n        const response = await axios.get(\"https://i11a707.p.ssafy.io:8082/focus-time/goal\");\n        console.log(response);\n        const timeGoal = timeStringToSeconds(response.data.timeGoal);\n        return timeGoal;\n      } catch (error) {\n        console.error(\"데이터를 가져오는 중 오류 발생:\", error);\n        return 0;\n      }\n    };\n    const updatePercentage = async () => {\n      const dailyFocusTime = await fetchFocusTime();\n      const timeGoal = await fetchTimeGoal();\n      if (timeGoal > 0) {\n        const achievementRate = dailyFocusTime / timeGoal * 100;\n        percentage.value = achievementRate.toFixed(2);\n      } else {\n        percentage.value = \"0\";\n      }\n    };\n    onMounted(() => {\n      updatePercentage();\n    });\n    return {\n      percentage\n    };\n  }\n};","map":{"version":3,"names":["axios","ref","onMounted","name","props","animated","type","Boolean","default","setup","percentage","timeStringToSeconds","timeString","hours","minutes","seconds","split","map","Number","fetchFocusTime","response","get","params","period","console","log","dailyFocusTime","data","totalFocusTime","error","fetchTimeGoal","timeGoal","updatePercentage","achievementRate","value","toFixed"],"sources":["C:\\Users\\SSAFY\\Desktop\\S11P12A707\\Frontend\\top\\src\\components\\TodayAchievement2.vue"],"sourcesContent":["<template>\r\n  <div class=\"goal-container\">\r\n    <div class=\"goal-chart\">\r\n      <svg viewBox=\"0 0 36 36\" class=\"circular-chart\">\r\n        <path\r\n          class=\"circle-bg\"\r\n          d=\"M18 2.0845\r\n             a 15.9155 15.9155 0 0 1 0 31.831\r\n             a 15.9155 15.9155 0 0 1 0 -31.831\"\r\n        />\r\n        <path\r\n          :class=\"['circle', { 'no-animation': !animated }]\"\r\n          :style=\"{ strokeDasharray: `${percentage}, 100` }\"\r\n          d=\"M18 2.0845\r\n             a 15.9155 15.9155 0 0 1 0 31.831\r\n             a 15.9155 15.9155 0 0 1 0 -31.831\"\r\n        />\r\n        <text x=\"18\" y=\"20.35\" class=\"percentage\">{{ percentage }}%</text>\r\n      </svg>\r\n    </div>\r\n    <div class=\"goal-label\">일간 목표 달성률</div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\nimport { ref, onMounted } from \"vue\";\r\n\r\nexport default {\r\n  name: \"GoalChart\",\r\n  props: {\r\n    animated: {\r\n      type: Boolean,\r\n      default: true,\r\n    },\r\n  },\r\n  setup() {\r\n    const percentage = ref(0);\r\n\r\n    const timeStringToSeconds = (timeString) => {\r\n      const [hours, minutes, seconds] = timeString.split(\":\").map(Number);\r\n      return hours * 3600 + minutes * 60 + seconds;\r\n    };\r\n\r\n    const fetchFocusTime = async () => {\r\n      try {\r\n        const response = await axios.get(\r\n          \"https://i11a707.p.ssafy.io:8082/dash/stats/focus-time\",\r\n          {\r\n            params: {\r\n              period: \"day\",\r\n            },\r\n          }\r\n        );\r\n        console.log(response);\r\n        const dailyFocusTime = timeStringToSeconds(\r\n          response.data.totalFocusTime\r\n        );\r\n        return dailyFocusTime;\r\n      } catch (error) {\r\n        console.error(\"데이터를 가져오는 중 오류 발생:\", error);\r\n        return 0;\r\n      }\r\n    };\r\n\r\n    const fetchTimeGoal = async () => {\r\n      try {\r\n        const response = await axios.get(\r\n          \"https://i11a707.p.ssafy.io:8082/focus-time/goal\"\r\n        );\r\n        console.log(response);\r\n        const timeGoal = timeStringToSeconds(response.data.timeGoal);\r\n        return timeGoal;\r\n      } catch (error) {\r\n        console.error(\"데이터를 가져오는 중 오류 발생:\", error);\r\n        return 0;\r\n      }\r\n    };\r\n\r\n    const updatePercentage = async () => {\r\n      const dailyFocusTime = await fetchFocusTime();\r\n      const timeGoal = await fetchTimeGoal();\r\n\r\n      if (timeGoal > 0) {\r\n        const achievementRate = (dailyFocusTime / timeGoal) * 100;\r\n        percentage.value = achievementRate.toFixed(2);\r\n      } else {\r\n        percentage.value = \"0\";\r\n      }\r\n    };\r\n\r\n    onMounted(() => {\r\n      updatePercentage();\r\n    });\r\n\r\n    return {\r\n      percentage,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.goal-container {\r\n  text-align: center;\r\n  height: 200px;\r\n  width: 161px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n.goal-chart {\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n.circular-chart {\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n.circle-bg {\r\n  fill: none;\r\n  stroke: #eee;\r\n  stroke-width: 3.8;\r\n}\r\n\r\n.circle {\r\n  fill: none;\r\n  stroke-width: 3.8;\r\n  stroke: #5865f2;\r\n  stroke-linecap: round;\r\n  transition: stroke-dasharray 1s ease-out;\r\n}\r\n\r\n.no-animation {\r\n  transition: none;\r\n}\r\n\r\n.percentage {\r\n  fill: #000;\r\n  font-family: Arial, sans-serif;\r\n  font-size: 0.5em;\r\n  text-anchor: middle;\r\n}\r\n\r\n.goal-label {\r\n  margin-top: 10px;\r\n  font-family: Arial, sans-serif;\r\n  font-size: 1em;\r\n  color: #888;\r\n}\r\n</style>\r\n"],"mappings":"AAyBA,OAAOA,KAAI,MAAO,OAAO;AACzB,SAASC,GAAG,EAAEC,SAAQ,QAAS,KAAK;AAEpC,eAAe;EACbC,IAAI,EAAE,WAAW;EACjBC,KAAK,EAAE;IACLC,QAAQ,EAAE;MACRC,IAAI,EAAEC,OAAO;MACbC,OAAO,EAAE;IACX;EACF,CAAC;EACDC,KAAKA,CAAA,EAAG;IACN,MAAMC,UAAS,GAAIT,GAAG,CAAC,CAAC,CAAC;IAEzB,MAAMU,mBAAkB,GAAKC,UAAU,IAAK;MAC1C,MAAM,CAACC,KAAK,EAAEC,OAAO,EAAEC,OAAO,IAAIH,UAAU,CAACI,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,MAAM,CAAC;MACnE,OAAOL,KAAI,GAAI,IAAG,GAAIC,OAAM,GAAI,EAAC,GAAIC,OAAO;IAC9C,CAAC;IAED,MAAMI,cAAa,GAAI,MAAAA,CAAA,KAAY;MACjC,IAAI;QACF,MAAMC,QAAO,GAAI,MAAMpB,KAAK,CAACqB,GAAG,CAC9B,uDAAuD,EACvD;UACEC,MAAM,EAAE;YACNC,MAAM,EAAE;UACV;QACF,CACF,CAAC;QACDC,OAAO,CAACC,GAAG,CAACL,QAAQ,CAAC;QACrB,MAAMM,cAAa,GAAIf,mBAAmB,CACxCS,QAAQ,CAACO,IAAI,CAACC,cAChB,CAAC;QACD,OAAOF,cAAc;MACvB,EAAE,OAAOG,KAAK,EAAE;QACdL,OAAO,CAACK,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;QAC1C,OAAO,CAAC;MACV;IACF,CAAC;IAED,MAAMC,aAAY,GAAI,MAAAA,CAAA,KAAY;MAChC,IAAI;QACF,MAAMV,QAAO,GAAI,MAAMpB,KAAK,CAACqB,GAAG,CAC9B,iDACF,CAAC;QACDG,OAAO,CAACC,GAAG,CAACL,QAAQ,CAAC;QACrB,MAAMW,QAAO,GAAIpB,mBAAmB,CAACS,QAAQ,CAACO,IAAI,CAACI,QAAQ,CAAC;QAC5D,OAAOA,QAAQ;MACjB,EAAE,OAAOF,KAAK,EAAE;QACdL,OAAO,CAACK,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;QAC1C,OAAO,CAAC;MACV;IACF,CAAC;IAED,MAAMG,gBAAe,GAAI,MAAAA,CAAA,KAAY;MACnC,MAAMN,cAAa,GAAI,MAAMP,cAAc,CAAC,CAAC;MAC7C,MAAMY,QAAO,GAAI,MAAMD,aAAa,CAAC,CAAC;MAEtC,IAAIC,QAAO,GAAI,CAAC,EAAE;QAChB,MAAME,eAAc,GAAKP,cAAa,GAAIK,QAAQ,GAAI,GAAG;QACzDrB,UAAU,CAACwB,KAAI,GAAID,eAAe,CAACE,OAAO,CAAC,CAAC,CAAC;MAC/C,OAAO;QACLzB,UAAU,CAACwB,KAAI,GAAI,GAAG;MACxB;IACF,CAAC;IAEDhC,SAAS,CAAC,MAAM;MACd8B,gBAAgB,CAAC,CAAC;IACpB,CAAC,CAAC;IAEF,OAAO;MACLtB;IACF,CAAC;EACH;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}