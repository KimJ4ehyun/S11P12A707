{"ast":null,"code":"import { createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-f9d55fde\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"bigbox\"\n};\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h2\", null, \"타임라인\", -1 /* HOISTED */));\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_bar_chart = _resolveComponent(\"bar-chart\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _createVNode(_component_bar_chart, {\n    ref: \"chart\",\n    class: \"chart\",\n    data: $setup.chartData,\n    options: $setup.chartOptions\n  }, null, 8 /* PROPS */, [\"data\", \"options\"])]);\n}","map":{"version":3,"names":["class","_createElementVNode","_createElementBlock","_hoisted_1","_hoisted_2","_createVNode","_component_bar_chart","ref","data","$setup","chartData","options","chartOptions"],"sources":["C:\\Users\\SSAFY\\Desktop\\S11P12A707\\Frontend\\top\\src\\components\\TimeLine.vue"],"sourcesContent":["<template>\r\n  <div class=\"bigbox\">\r\n    <h2>타임라인</h2>\r\n    <bar-chart ref=\"chart\" class=\"chart\" :data=\"chartData\" :options=\"chartOptions\"></bar-chart>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { Bar } from 'vue-chartjs';\r\nimport { Chart, registerables } from 'chart.js';\r\nimport { reactive, ref, onMounted, watch } from 'vue';\r\nimport axios from 'axios';\r\nChart.register(...registerables);\r\n\r\nexport default {\r\n  components: {\r\n    'bar-chart': Bar\r\n  },\r\n  setup() {\r\n    const chart = ref(null);\r\n    const usageData = ref(Array(24).fill(0)); // Initialize usageData with 24 hours of zeros\r\n    \r\n    const chartData = reactive({\r\n      labels: Array.from({ length: 24 }, (_, i) => i.toString()),\r\n      datasets: [{\r\n        label: '집중 시간',\r\n        data: usageData.value, // Directly bind usageData to chart data\r\n        // data: usageData.value, // Directly bind usageData to chart data\r\n        backgroundColor: usageData.value.map(() => '#c6d1ff'),\r\n      }]\r\n    });\r\n\r\n    const chartOptions = reactive({\r\n      scales: {\r\n        x: {\r\n          ticks: {\r\n            maxRotation: 0,\r\n            minRotation: 0,\r\n            font: {\r\n              size: 12,\r\n              family: 'Arial'\r\n            },\r\n            padding: 5,\r\n          },\r\n          grid: {\r\n            display: false\r\n          }\r\n        },\r\n        y: {\r\n          beginAtZero: true,\r\n          max: 60,\r\n          ticks: {\r\n            font: {\r\n              size: 12,\r\n              family: 'Arial'\r\n            },\r\n            padding: 5\r\n          },\r\n          grid: {\r\n            display: true\r\n          }\r\n        }\r\n      },\r\n      plugins: {\r\n        legend: {\r\n          display: false\r\n        },\r\n        tooltip: {\r\n          enabled: true,\r\n          mode: 'index',\r\n          intersect: true,\r\n          position: 'nearest',\r\n          callbacks: {\r\n            label: function(context) {\r\n              let label = context.dataset.label || '';\r\n              if (label) {\r\n                label += ': ';\r\n              }\r\n              if (context.parsed.y !== null) {\r\n                label += context.parsed.y;\r\n              }\r\n              return label;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    });\r\n    \r\n    const fetchFocusTimeData = async () => {\r\n      try {\r\n        const response = await axios.get('https://i11a707.p.ssafy.io/api/dash/stats/focus-time/detail', {\r\n          params: { period: 'day' }\r\n        });\r\n\r\n        // Reset usageData to zeros before updating with new data\r\n        usageData.value.fill(0);\r\n\r\n        response.data.data.forEach(entry => {\r\n          usageData.value[entry.startTime] = entry.focusTime / 60;\r\n        });\r\n        console.log(usageData.value)\r\n        updateChartData();\r\n      } catch (error) {\r\n        console.error('Error fetching focus time data:', error);\r\n      }\r\n    };\r\n    \r\n    const updateChartData = () => {\r\n      const maxUsage = Math.max(...usageData.value);\r\n      chartData.datasets[0].data = [...usageData.value]; // Reassign the data to trigger reactivity\r\n      chartData.datasets[0].backgroundColor = usageData.value.map(value => value === maxUsage ? '#5865f2' : '#c6d1ff');\r\n      console.log(chartData.datasets[0].backgroundColor)\r\n      if (chart.value && chart.value.chartInstance) {\r\n        chart.value.chartInstance.update(); // Manually trigger chart update\r\n      }\r\n    };\r\n    \r\n    onMounted(() => {\r\n      fetchFocusTimeData();\r\n    });\r\n    \r\n    watch(usageData, () => {\r\n      updateChartData();\r\n    });\r\n\r\n    return {\r\n      chart,\r\n      chartData,\r\n      chartOptions\r\n    };\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.bigbox {\r\n  height: 400px;\r\n  width: 644px;\r\n}\r\n\r\n.chart {\r\n  height: 100%;\r\n  width: 100%;\r\n  box-sizing: border-box !important;\r\n}\r\n\r\nh2 {\r\n  color: #b0bec5;\r\n  font-weight: 700;\r\n  margin-bottom: 0px;\r\n}\r\n</style>\r\n"],"mappings":";;;EACOA,KAAK,EAAC;AAAQ;gEACjBC,mBAAA,CAAa,YAAT,MAAI;;;uBADVC,mBAAA,CAGM,OAHNC,UAGM,GAFJC,UAAa,EACbC,YAAA,CAA2FC,oBAAA;IAAhFC,GAAG,EAAC,OAAO;IAACP,KAAK,EAAC,OAAO;IAAEQ,IAAI,EAAEC,MAAA,CAAAC,SAAS;IAAGC,OAAO,EAAEF,MAAA,CAAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}