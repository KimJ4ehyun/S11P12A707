{"ast":null,"code":"import { createElementVNode as _createElementVNode, normalizeClass as _normalizeClass, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-aae30ed8\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"container\"\n};\nconst _hoisted_2 = {\n  class: \"content\"\n};\nconst _hoisted_3 = {\n  class: \"header\"\n};\nconst _hoisted_4 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h1\", null, \"Dashboard\", -1 /* HOISTED */));\nconst _hoisted_5 = {\n  ref: \"gridstack\",\n  class: \"grid-stack\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_hoisted_4, _createElementVNode(\"a\", {\n    class: \"edit-button\",\n    onClick: _cache[0] || (_cache[0] = (...args) => $setup.toggleEditMode && $setup.toggleEditMode(...args))\n  }, \"/EDIT\")]), _createElementVNode(\"div\", _hoisted_5, null, 512 /* NEED_PATCH */), _createElementVNode(\"button\", {\n    class: _normalizeClass([\"toggle-button\", {\n      open: $setup.isSidebarOpen\n    }]),\n    onClick: _cache[1] || (_cache[1] = (...args) => $setup.toggleSidebar && $setup.toggleSidebar(...args))\n  }, \" ☰ \", 2 /* CLASS */)])]);\n}","map":{"version":3,"names":["class","_createElementVNode","ref","_createElementBlock","_hoisted_1","_hoisted_2","_hoisted_3","_hoisted_4","onClick","_cache","args","$setup","toggleEditMode","_hoisted_5","_normalizeClass","open","isSidebarOpen","toggleSidebar"],"sources":["C:\\Users\\SSAFY\\Desktop\\S11P12A707\\Frontend\\top\\src\\components\\Dashboard.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <div class=\"content\">\r\n      <div class=\"header\">\r\n        <h1>Dashboard</h1>\r\n        <a class=\"edit-button\" @click=\"toggleEditMode\">/EDIT</a>\r\n      </div>\r\n      <div ref=\"gridstack\" class=\"grid-stack\"></div>\r\n      <button\r\n        class=\"toggle-button\"\r\n        :class=\"{ open: isSidebarOpen }\"\r\n        @click=\"toggleSidebar\"\r\n      >\r\n        ☰\r\n      </button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { createApp, onMounted, ref, nextTick } from \"vue\";\r\nimport { GridStack } from \"gridstack\";\r\nimport \"gridstack/dist/gridstack.min.css\";\r\nimport TodayFocus1 from \"./TodayFocus1.vue\";\r\nimport WeekFocus1 from \"./WeekFocus1.vue\";\r\nimport MonthFocus1 from \"./MonthFocus1.vue\";\r\nimport TodayFocus2 from \"./TodayFocus2.vue\";\r\nimport WeekFocus2 from \"./WeekFocus2.vue\";\r\nimport MonthFocus2 from \"./MonthFocus2.vue\";\r\nimport TodayFocus2WithoutID from \"./TodayFocus2WithoutID.vue\";\r\nimport WeekFocus2WithoutID from \"./WeekFocus2WithoutID.vue\";\r\nimport MonthFocus2WithoutID from \"./MonthFocus2WithoutID.vue\";\r\nimport TotalFocus2WithoutID from \"./TotalFocus2WithoutID.vue\";\r\nimport PercentileRank from \"./PercentileRank.vue\";\r\nimport TimeCheck from \"./TimeCheck.vue\";\r\nimport TodayAchievement1 from \"./TodayAchievement1.vue\";\r\nimport WeekAchievement1 from \"./WeekAchievement1.vue\";\r\nimport MonthAchievement1 from \"./MonthAchievement1.vue\";\r\nimport TodayAchievement2 from \"./TodayAchievement2.vue\";\r\nimport WeekAchievement2 from \"./WeekAchievement2.vue\";\r\nimport MonthAchievement2 from \"./MonthAchievement2.vue\";\r\nimport MonthStreakColumn from \"./MonthStreakColumn.vue\";\r\nimport MonthStreakRow from \"./MonthStreakRow.vue\";\r\nimport HalfYearStreak from \"./HalfYearStreak.vue\";\r\nimport CalendarCheck from \"./CalendarCheck.vue\";\r\nimport FocusTimeEachPrograms from \"./FocusTimeEachPrograms.vue\";\r\nimport FocusTimeEachProgramsPrecentage from \"./FocusTimeEachProgramsPrecentage.vue\";\r\nimport TimeLine from \"./TimeLine.vue\";\r\nimport TodayAchievementTime from \"./TodayAchievementTime.vue\";\r\nimport WeekAchievementTime from \"./WeekAchievementTime.vue\";\r\nimport MonthAchievementTime from \"./MonthAchievementTime.vue\";\r\n\r\nexport default {\r\n  name: \"GridstackComponent\",\r\n  components: {},\r\n  setup() {\r\n    const gridstack = ref(null);\r\n    const isSidebarOpen = ref(false);\r\n    const isEditMode = ref(false);\r\n    let grid;\r\n\r\n    const addWidget = (component, width = 2, height = 2) => {\r\n      if (!grid) {\r\n        console.error(\"GridStack is not initialized yet.\");\r\n        return;\r\n      }\r\n\r\n      const widgetElement = document.createElement(\"div\");\r\n      widgetElement.className = \"grid-stack-item\";\r\n      widgetElement.innerHTML = `\r\n          <div class=\"grid-stack-item-content\">\r\n            <div class=\"widget-delete\">✖</div>\r\n          </div>`;\r\n      grid.addWidget(widgetElement, { w: width, h: height });\r\n\r\n      const contentElement = widgetElement.querySelector(\r\n        \".grid-stack-item-content\"\r\n      );\r\n      if (contentElement) {\r\n        const app = createApp(component);\r\n        app.mount(contentElement);\r\n      } else {\r\n        console.error(\"Failed to find .grid-stack-item-content element.\");\r\n      }\r\n    };\r\n\r\n    const removeWidget = (event) => {\r\n      const widgetElement = event.target.closest(\".grid-stack-item\");\r\n      grid.removeWidget(widgetElement);\r\n    };\r\n\r\n    const toggleEditMode = () => {\r\n      isEditMode.value = !isEditMode.value;\r\n      const deleteButtons = document.querySelectorAll(\".widget-delete\");\r\n      deleteButtons.forEach((button) => {\r\n        button.style.display = isEditMode.value ? \"block\" : \"none\";\r\n      });\r\n    };\r\n\r\n    const toggleSidebar = () => {\r\n      isSidebarOpen.value = !isSidebarOpen.value;\r\n    };\r\n\r\n    onMounted(() => {\r\n      nextTick(() => {\r\n        const gridElement = gridstack.value;\r\n        if (!gridElement) {\r\n          console.error(\"GridStack element not found\");\r\n          return;\r\n        }\r\n\r\n        grid = GridStack.init(\r\n          {\r\n            column: 12, // 그리드 열 수 설정\r\n            cellHeight: 125, // 셀 높이 설정\r\n            float: true,\r\n          },\r\n          gridElement\r\n        );\r\n\r\n        // 이벤트 위임을 사용하여 삭제 버튼 클릭 처리\r\n        gridElement.addEventListener(\"click\", (event) => {\r\n          if (event.target.classList.contains(\"widget-delete\")) {\r\n            removeWidget(event);\r\n          }\r\n        });\r\n\r\n        // 모든 컴포넌트를 초기 상태로 추가\r\n        const components = [\r\n          { component: TodayFocus1, width: 2, height: 1 },\r\n          { component: WeekFocus1, width: 2, height: 1 },\r\n          { component: MonthFocus1, width: 2, height: 1 },\r\n          { component: TodayFocus2, width: 4, height: 1 },\r\n          { component: WeekFocus2, width: 4, height: 1 },\r\n          { component: MonthFocus2, width: 4, height: 1 },\r\n          { component: TodayFocus2WithoutID, width: 4, height: 1 },\r\n          { component: WeekFocus2WithoutID, width: 4, height: 1 },\r\n          { component: MonthFocus2WithoutID, width: 4, height: 1 },\r\n          { component: TotalFocus2WithoutID, width: 4, height: 1 },\r\n          { component: PercentileRank, width: 4, height: 3 },\r\n          { component: TimeCheck, width: 4, height: 2 },\r\n          { component: TodayAchievement1, width: 2, height: 1 },\r\n          { component: WeekAchievement1, width: 2, height: 1 },\r\n          { component: MonthAchievement1, width: 2, height: 1 },\r\n          { component: TodayAchievement2, width: 2, height: 2 },\r\n          { component: WeekAchievement2, width: 2, height: 2 },\r\n          { component: MonthAchievement2, width: 2, height: 2 },\r\n          { component: MonthStreakColumn, width: 2, height: 2 },\r\n          { component: MonthStreakRow, width: 2, height: 2 },\r\n          { component: HalfYearStreak, width: 8, height: 2 },\r\n          { component: CalendarCheck, width: 6, height: 4 },\r\n          { component: FocusTimeEachPrograms, width: 6, height: 4 },\r\n          { component: FocusTimeEachProgramsPrecentage, width: 6, height: 4 },\r\n          { component: TimeLine, width: 6, height: 4 },\r\n          { component: TodayAchievementTime, width: 2, height: 1 },\r\n          { component: WeekAchievementTime, width: 2, height: 1 },\r\n          { component: MonthAchievementTime, width: 2, height: 1 },\r\n        ];\r\n\r\n        components.forEach(({ component, width, height }) => {\r\n          addWidget(component, width, height);\r\n        });\r\n      });\r\n    });\r\n\r\n    return {\r\n      gridstack,\r\n      isSidebarOpen,\r\n      isEditMode,\r\n      toggleSidebar,\r\n      toggleEditMode,\r\n      addWidget,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.layout {\r\n  display: flex;\r\n  height: 100vh;\r\n  overflow: hidden;\r\n  background-color: #f8f9fa;\r\n  border-radius: 10px; /* 대시보드 모서리를 둥글게 */\r\n}\r\n\r\n.header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 20px;\r\n  background-color: #f8f9fa;\r\n  width: 100%;\r\n  border-radius: 10px 10px 0 0; /* 상단 모서리 둥글게 */\r\n  margin-bottom: 20px; /* 내용과의 간격 추가 */\r\n}\r\n\r\n.header h1 {\r\n  margin: 0;\r\n}\r\n\r\n.edit-button {\r\n  cursor: pointer;\r\n  color: #3498db;\r\n}\r\n\r\n.sidebar {\r\n  position: fixed;\r\n  top: 0;\r\n  right: 0;\r\n  height: 100%;\r\n  width: 250px;\r\n  background-color: #f8f9fa;\r\n  box-shadow: -2px 0 5px rgba(0, 0, 0, 0.5);\r\n  transform: translateX(100%);\r\n  transition: transform 0.3s ease;\r\n  z-index: 1000;\r\n  overflow-y: auto; /* 사이드바 내부 스크롤 설정 */\r\n  border-top-left-radius: 10px; /* 사이드바 모서리를 둥글게 */\r\n  border-bottom-left-radius: 10px; /* 사이드바 모서리를 둥글게 */\r\n}\r\n\r\n.sidebar.open {\r\n  transform: translateX(0);\r\n}\r\n\r\n.toggle-button {\r\n  position: fixed;\r\n  top: 20px;\r\n  right: 20px;\r\n  width: 50px;\r\n  height: 50px;\r\n  background-color: #3498db;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  z-index: 1001;\r\n  transition: right 0.3s ease;\r\n}\r\n\r\n.toggle-button.open {\r\n  right: 270px; /* 사이드바 너비 + 여백 */\r\n}\r\n\r\n.toggle-button:hover {\r\n  background-color: #2980b9;\r\n}\r\n\r\n.sidebar-content {\r\n  padding: 20px;\r\n  height: calc(\r\n    100% - 40px\r\n  ); /* 높이를 계산하여 상단 버튼을 포함하지 않도록 설정 */\r\n}\r\n\r\n.sidebar-content button {\r\n  display: block;\r\n  width: 100%;\r\n  margin-bottom: 10px;\r\n  padding: 10px;\r\n  background-color: #3498db;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n}\r\n\r\n.sidebar-content button:hover {\r\n  background-color: #2980b9;\r\n}\r\n\r\n.content {\r\n  flex-grow: 1;\r\n  overflow: auto;\r\n  transition: margin-right 0.3s ease, width 0.3s ease;\r\n  background-color: #f8f9fa;\r\n  border-radius: 10px; /* 대시보드 모서리를 둥글게 */\r\n}\r\n\r\n.layout.sidebar-open .content {\r\n  margin-right: 250px; /* 사이드바의 너비만큼 오른쪽으로 이동 */\r\n}\r\n\r\n.grid-stack {\r\n  width: 100%;\r\n  padding: 20px; /* 사이드바와 대시보드 간의 여백을 추가 */\r\n  flex-shrink: 0; /* 대시보드가 사이드바에 밀리지 않도록 고정 */\r\n}\r\n\r\n.grid-stack-item {\r\n  width: calc(100% / 12); /* 12열 그리드에 맞게 셀 너비를 설정 */\r\n}\r\n\r\n.grid-stack-item-content {\r\n  background-color: #ffffff !important; /* 위젯 배경색을 하얀색으로 설정 */\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  color: #333; /* 텍스트 색상 변경 */\r\n  height: 100%;\r\n  border-radius: 10px; /* 위젯 모서리를 둥글게 설정 */\r\n  white-space: nowrap; /* 줄넘김 방지 */\r\n  overflow: hidden;\r\n  text-overflow: ellipsis; /* 글자 길어질 경우 생략표시 */\r\n  position: relative; /* 삭제 버튼 위치를 위해 필요 */\r\n}\r\n\r\n.widget-delete {\r\n  position: absolute;\r\n  top: 5px;\r\n  right: 5px;\r\n  background: red;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 50%;\r\n  width: 20px;\r\n  height: 20px;\r\n  text-align: center;\r\n  cursor: pointer;\r\n  display: none; /* 초기에는 숨김 */\r\n}\r\n\r\nbutton {\r\n  padding: 10px 20px;\r\n  background-color: #3498db;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n}\r\n\r\nbutton:hover {\r\n  background-color: #2980b9;\r\n}\r\n</style>\r\n"],"mappings":";;;EACOA,KAAK,EAAC;AAAW;;EACfA,KAAK,EAAC;AAAS;;EACbA,KAAK,EAAC;AAAQ;gEACjBC,mBAAA,CAAkB,YAAd,WAAS;;EAGVC,GAAG,EAAC,WAAW;EAACF,KAAK,EAAC;;;uBAN/BG,mBAAA,CAeM,OAfNC,UAeM,GAdJH,mBAAA,CAaM,OAbNI,UAaM,GAZJJ,mBAAA,CAGM,OAHNK,UAGM,GAFJC,UAAkB,EAClBN,mBAAA,CAAwD;IAArDD,KAAK,EAAC,aAAa;IAAEQ,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,MAAA,CAAAC,cAAA,IAAAD,MAAA,CAAAC,cAAA,IAAAF,IAAA,CAAc;KAAE,OAAK,E,GAEtDT,mBAAA,CAA8C,OAA9CY,UAA8C,+BAC9CZ,mBAAA,CAMS;IALPD,KAAK,EATbc,eAAA,EASc,eAAe;MAAAC,IAAA,EACLJ,MAAA,CAAAK;IAAa;IAC5BR,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,MAAA,CAAAM,aAAA,IAAAN,MAAA,CAAAM,aAAA,IAAAP,IAAA,CAAa;KACtB,KAED,iB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}